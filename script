// DOM Elements
const connectBtn = document.getElementById("connectBtn");
const scoreElem = document.getElementById("stressScore");
const ctx = document.getElementById("stressChart").getContext("2d");

// Chart setup
let stressChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: [],
        datasets: [{
            label: 'Stress Score',
            data: [],
            borderColor: 'rgba(255,99,132,1)',
            backgroundColor: 'rgba(255,99,132,0.2)',
            tension: 0.4
        }]
    },
    options: {
        responsive: true,
        scales: {
            y: {
                min: 0,
                max: 100
            }
        }
    }
});

// Utility: Calculate RMSSD from RR intervals
function calculateRMSSD(rrIntervals) {
    if (rrIntervals.length < 2) return 0;
    let diffs = rrIntervals.slice(1).map((val, i) => val - rrIntervals[i]);
    let squares = diffs.map(d => d * d);
    let meanSquare = squares.reduce((sum, val) => sum + val, 0) / squares.length;
    return Math.sqrt(meanSquare);
}

// Utility: Normalize RMSSD to stress score
function rmssdToStressScore(rmssd) {
    const maxRMSSD = 100;
    const minRMSSD = 10;
    let normalized = (rmssd - minRMSSD) / (maxRMSSD - minRMSSD);
    let stress = 100 - (normalized * 100);
    return Math.max(0, Math.min(100, Math.round(stress)));
}

// Save and update chart
function updateStressChart(score) {
    let now = new Date().toLocaleTimeString();
    stressChart.data.labels.push(now);
    stressChart.data.datasets[0].data.push(score);
    stressChart.update();

    // Save to localStorage
    let history = JSON.parse(localStorage.getItem("stressHistory")) || [];
    history.push({ time: now, score });
    localStorage.setItem("stressHistory", JSON.stringify(history));
}

// Load from localStorage on init
function loadHistory() {
    let history = JSON.parse(localStorage.getItem("stressHistory")) || [];
    history.forEach(entry => {
        stressChart.data.labels.push(entry.time);
        stressChart.data.datasets[0].data.push(entry.score);
    });
    stressChart.update();
}

// Bluetooth HRV pairing and parsing
async function connectToHRVMonitor() {
    try {
        const device = await navigator.bluetooth.requestDevice({
            filters: [{ services: ['heart_rate'] }]
        });

        const server = await device.gatt.connect();
        const service = await server.getPrimaryService('heart_rate');
        const characteristic = await service.getCharacteristic('heart_rate_measurement');

        characteristic.addEventListener("characteristicvaluechanged", handleHRVData);
        await characteristic.startNotifications();
        console.log("Connected and listening for HRV data...");
    } catch (err) {
        alert("Connection failed: " + err);
    }
}

let rrBuffer = [];

function handleHRVData(event) {
    const data = event.target.value;
    const flags = data.getUint8(0);
    const rrPresent = (flags & 0x10) > 0;

    if (!rrPresent) return;

    let offset = 1;
    let rrIntervals = [];

    while (offset + 1 < data.byteLength) {
        const rr = data.getUint16(offset, true); // in ms
        rrIntervals.push(rr);
        offset += 2;
    }

    rrBuffer.push(...rrIntervals);

    if (rrBuffer.length >= 20) {
        const rmssd = calculateRMSSD(rrBuffer.slice(-20));
        const stressScore = rmssdToStressScore(rmssd);
        scoreElem.textContent = stressScore;
        updateStressChart(stressScore);
    }
}

// Event listener
connectBtn.addEventListener("click", connectToHRVMonitor);

// Collapsible sections logic
document.querySelectorAll(".collapsible").forEach(btn => {
    btn.addEventListener("click", function () {
        this.classList.toggle("active");
        const content = this.nextElementSibling;
        content.style.display = (content.style.display === "block") ? "none" : "block";
    });
});

// On load
window.addEventListener("DOMContentLoaded", loadHistory);
